# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BrowserMetric {
  bytesCompressed: Float!
  bytesUncompressed: Float!
  domain: String!
  frontendApp: FrontendApp!
  path: String!
  time: DateTime!
  userAgent: String!
}

enum CloudProvider {
  AWS
}

type CloudProviderAccount {
  id: ID!
  lastImportedAt: DateTime!
  project: Project!
  provider: CloudProvider!
  region: String!
  serverInstances: [ServerInstance]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FrontendApp {
  crossOrigins: [BrowserMetric]!
  id: ID!
  metrics: [BrowserMetric]!
  name: String!
  project: Project!
  urls: [String!]!
}

interface Metric {
  name: String!
  period: DateTime!
}

enum MetricPeriod {
  DAY
  FIFTEEN_MINUTES
  FIVE_MINUTES
  HOUR
  MINUTE
  MONTH
  THIRTY_MINUTES
  THREE_MONTHS
  WEEK
  YEAR
}

type Organization {
  id: ID!
  name: String!
  projects: [Project]!
  userRoles: [UserOrganizationRole]!
}

type Project {
  cloudProviderAccounts: [CloudProviderAccount]!
  frontendApps: [FrontendApp]!
  id: ID!
  name: String!
  userRoles: [UserProjectRole]!
}

type Query {
  me: User!
  organization(id: ID!): Organization!
  project(id: ID!): Project!
  serverInstance(id: ID!): ServerInstance!
}

type ServerInstance {
  class: String!
  cloudProviderAccount: [CloudProviderAccount]!
  id: ID!
  instanceId: String!
  metrics(endDate: DateTime!, models: [String!]!, period: MetricPeriod!, startDate: DateTime!): [Metric]!
  state: String!
  tags: [ServerInstanceTag]!
}

type ServerInstanceTag {
  key: String!
  value: String!
}

type TeadsAWSMetric implements Metric {
  embodiedCarbon: Float
  energy: Float
  name: String!
  period: DateTime!
}

type User {
  id: ID!
  organizationRoles: [UserOrganizationRole]!
  project(id: ID!): Project!
  projectRoles: [UserProjectRole]!
}

type UserOrganizationRole {
  id: ID!
  organization: Organization!
  roles: [String!]!
  user: User!
}

type UserProjectRole {
  id: ID!
  project: Project!
  roles: [String!]!
  user: User!
}

type UtilizationMetric implements Metric {
  cpu: Float!
  diskReadOps: Float
  diskWriteOps: Float
  name: String!
  networkIn: Float
  networkOut: Float
  period: DateTime!
}